// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Mc2.CrudTest.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CustomerManagementFeature : object, Xunit.IClassFixture<CustomerManagementFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CustomerManagement.feature"
#line hidden
        
        public CustomerManagementFeature(CustomerManagementFeature.FixtureData fixtureData, Mc2_CrudTest_AcceptanceTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Customer Management", "  As a system administrator\r\n  I want to manage customer information", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
  #line hidden
#line 6
    testRunner.Given("the system is running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
    testRunner.And("the database is clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a new customer with valid information")]
        [Xunit.TraitAttribute("FeatureTitle", "Customer Management")]
        [Xunit.TraitAttribute("Description", "Create a new customer with valid information")]
        public void CreateANewCustomerWithValidInformation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new customer with valid information", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1.AddRow(new string[] {
                            "FirstName",
                            "soheil"});
                table1.AddRow(new string[] {
                            "LastName",
                            "km"});
                table1.AddRow(new string[] {
                            "DateOfBirth",
                            "2000-01-15"});
                table1.AddRow(new string[] {
                            "Email",
                            "soheil79km@hotmail.com"});
                table1.AddRow(new string[] {
                            "PhoneNumber",
                            "+989383623312"});
                table1.AddRow(new string[] {
                            "BankAccountNumber",
                            "1234567890123456789"});
#line 10
    testRunner.Given("I have valid customer information:", ((string)(null)), table1, "Given ");
#line hidden
#line 18
    testRunner.When("I create a new customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
    testRunner.Then("the customer should be created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
    testRunner.And("the customer should have a unique ID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
    testRunner.And("a CustomerCreatedEvent should be raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Prevent duplicate customers based on uniqueness rule")]
        [Xunit.TraitAttribute("FeatureTitle", "Customer Management")]
        [Xunit.TraitAttribute("Description", "Prevent duplicate customers based on uniqueness rule")]
        public void PreventDuplicateCustomersBasedOnUniquenessRule()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Prevent duplicate customers based on uniqueness rule", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table2.AddRow(new string[] {
                            "FirstName",
                            "soheil"});
                table2.AddRow(new string[] {
                            "LastName",
                            "km"});
                table2.AddRow(new string[] {
                            "DateOfBirth",
                            "2000-01-15"});
                table2.AddRow(new string[] {
                            "Email",
                            "soheil79km@hotmail.com"});
                table2.AddRow(new string[] {
                            "PhoneNumber",
                            "+989383623312"});
                table2.AddRow(new string[] {
                            "BankAccountNumber",
                            "1234567890123456789"});
#line 24
    testRunner.Given("a customer exists with:", ((string)(null)), table2, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table3.AddRow(new string[] {
                            "FirstName",
                            "soheil"});
                table3.AddRow(new string[] {
                            "LastName",
                            "km"});
                table3.AddRow(new string[] {
                            "DateOfBirth",
                            "2000-01-15"});
                table3.AddRow(new string[] {
                            "Email",
                            "soheil79km@hotmail.com"});
                table3.AddRow(new string[] {
                            "PhoneNumber",
                            "+989383623312"});
                table3.AddRow(new string[] {
                            "BankAccountNumber",
                            "1234567890123456789"});
#line 32
    testRunner.When("I try to create another customer with:", ((string)(null)), table3, "When ");
#line hidden
#line 40
    testRunner.Then("the customer creation should fail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
    testRunner.And("I should receive an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Prevent duplicate customers based on Email")]
        [Xunit.TraitAttribute("FeatureTitle", "Customer Management")]
        [Xunit.TraitAttribute("Description", "Prevent duplicate customers based on Email")]
        public void PreventDuplicateCustomersBasedOnEmail()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Prevent duplicate customers based on Email", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table4.AddRow(new string[] {
                            "FirstName",
                            "soheil"});
                table4.AddRow(new string[] {
                            "LastName",
                            "km"});
                table4.AddRow(new string[] {
                            "DateOfBirth",
                            "2000-01-15"});
                table4.AddRow(new string[] {
                            "Email",
                            "soheil79km@hotmail.com"});
                table4.AddRow(new string[] {
                            "PhoneNumber",
                            "+989383623312"});
                table4.AddRow(new string[] {
                            "BankAccountNumber",
                            "1234567890123456789"});
#line 44
    testRunner.Given("a customer exists with:", ((string)(null)), table4, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table5.AddRow(new string[] {
                            "FirstName",
                            "ali"});
                table5.AddRow(new string[] {
                            "LastName",
                            "kmm"});
                table5.AddRow(new string[] {
                            "DateOfBirth",
                            "2001-01-15"});
                table5.AddRow(new string[] {
                            "Email",
                            "soheil79km@hotmail.com"});
                table5.AddRow(new string[] {
                            "PhoneNumber",
                            "+989383623312"});
                table5.AddRow(new string[] {
                            "BankAccountNumber",
                            "1234567890123456789"});
#line 52
    testRunner.When("I try to create another customer with:", ((string)(null)), table5, "When ");
#line hidden
#line 60
    testRunner.Then("the customer creation should fail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
    testRunner.And("I should receive an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validate email format")]
        [Xunit.TraitAttribute("FeatureTitle", "Customer Management")]
        [Xunit.TraitAttribute("Description", "Validate email format")]
        public void ValidateEmailFormat()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate email format", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table6.AddRow(new string[] {
                            "FirstName",
                            "soheil"});
                table6.AddRow(new string[] {
                            "LastName",
                            "km"});
                table6.AddRow(new string[] {
                            "DateOfBirth",
                            "2000-01-15"});
                table6.AddRow(new string[] {
                            "Email",
                            "invalid-email"});
                table6.AddRow(new string[] {
                            "PhoneNumber",
                            "+989383623312"});
                table6.AddRow(new string[] {
                            "BankAccountNumber",
                            "123456789012345678"});
#line 64
    testRunner.Given("I have customer information with invalid email:", ((string)(null)), table6, "Given ");
#line hidden
#line 72
    testRunner.When("I try to create a new customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 73
    testRunner.Then("the customer creation should fail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 74
    testRunner.And("I should receive an email validation error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validate mobile phone number")]
        [Xunit.TraitAttribute("FeatureTitle", "Customer Management")]
        [Xunit.TraitAttribute("Description", "Validate mobile phone number")]
        public void ValidateMobilePhoneNumber()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate mobile phone number", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 76
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table7.AddRow(new string[] {
                            "FirstName",
                            "soheil"});
                table7.AddRow(new string[] {
                            "LastName",
                            "km"});
                table7.AddRow(new string[] {
                            "DateOfBirth",
                            "2000-01-15"});
                table7.AddRow(new string[] {
                            "Email",
                            "soheil79km@hotmail.com"});
                table7.AddRow(new string[] {
                            "PhoneNumber",
                            "123"});
                table7.AddRow(new string[] {
                            "BankAccountNumber",
                            "1234567890123456789"});
#line 77
    testRunner.Given("I have customer information with invalid phone:", ((string)(null)), table7, "Given ");
#line hidden
#line 85
    testRunner.When("I try to create a new customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 86
    testRunner.Then("the customer creation should fail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 87
    testRunner.And("I should receive a phone validation error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validate minimum age requirement")]
        [Xunit.TraitAttribute("FeatureTitle", "Customer Management")]
        [Xunit.TraitAttribute("Description", "Validate minimum age requirement")]
        public void ValidateMinimumAgeRequirement()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate minimum age requirement", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 89
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table8.AddRow(new string[] {
                            "FirstName",
                            "soheil"});
                table8.AddRow(new string[] {
                            "LastName",
                            "km"});
                table8.AddRow(new string[] {
                            "DateOfBirth",
                            "2010-01-01"});
                table8.AddRow(new string[] {
                            "Email",
                            "soheil79km@hotmail.com"});
                table8.AddRow(new string[] {
                            "PhoneNumber",
                            "+989383623312"});
                table8.AddRow(new string[] {
                            "BankAccountNumber",
                            "1234567890123456789"});
#line 90
    testRunner.Given("I have customer information with underage person:", ((string)(null)), table8, "Given ");
#line hidden
#line 98
    testRunner.When("I try to create a new customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 99
    testRunner.Then("the customer creation should fail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 100
    testRunner.And("I should receive an age validation error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update existing customer")]
        [Xunit.TraitAttribute("FeatureTitle", "Customer Management")]
        [Xunit.TraitAttribute("Description", "Update existing customer")]
        public void UpdateExistingCustomer()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update existing customer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 102
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
#line 103
    testRunner.Given("a customer exists with ID \"550e8400-e29b-41d4-a716-446655440000\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table9.AddRow(new string[] {
                            "FirstName",
                            "Updatedsoheil"});
                table9.AddRow(new string[] {
                            "LastName",
                            "Updatedkm"});
                table9.AddRow(new string[] {
                            "DateOfBirth",
                            "2000-01-01"});
                table9.AddRow(new string[] {
                            "Email",
                            "updated@hotmail.com"});
                table9.AddRow(new string[] {
                            "PhoneNumber",
                            "+989383623312"});
                table9.AddRow(new string[] {
                            "BankAccountNumber",
                            "1234567890123456789"});
#line 104
    testRunner.When("I update the customer with:", ((string)(null)), table9, "When ");
#line hidden
#line 112
    testRunner.Then("the customer should be updated successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 113
    testRunner.And("a CustomerUpdatedEvent should be raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete existing customer")]
        [Xunit.TraitAttribute("FeatureTitle", "Customer Management")]
        [Xunit.TraitAttribute("Description", "Delete existing customer")]
        public void DeleteExistingCustomer()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete existing customer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 115
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
#line 116
    testRunner.Given("a customer exists with ID \"550e8400-e29b-41d4-a716-446655440000\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 117
    testRunner.When("I delete the customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 118
    testRunner.Then("the customer should be marked as deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 119
    testRunner.And("a CustomerDeletedEvent should be raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Retrieve customer by email")]
        [Xunit.TraitAttribute("FeatureTitle", "Customer Management")]
        [Xunit.TraitAttribute("Description", "Retrieve customer by email")]
        public void RetrieveCustomerByEmail()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve customer by email", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 121
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
#line 122
    testRunner.Given("a customer exists with email \"soheil79km@hotmail.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 123
    testRunner.When("I search for customer by email \"soheil79km@hotmail.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 124
    testRunner.Then("I should find the customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 125
    testRunner.And("the customer details should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get all customers with pagination")]
        [Xunit.TraitAttribute("FeatureTitle", "Customer Management")]
        [Xunit.TraitAttribute("Description", "Get all customers with pagination")]
        public void GetAllCustomersWithPagination()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all customers with pagination", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 127
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
#line 128
    testRunner.Given("15 customers exist in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 129
    testRunner.When("I request customers with page 1 and page size 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 130
    testRunner.Then("I should receive 10 customers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 131
    testRunner.And("the total count should be 15", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 132
    testRunner.And("pagination information should be correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CustomerManagementFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CustomerManagementFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
